import { DefaultModel } from "../default-model";
import * as _ from 'lodash';
export class Delivery extends DefaultModel {
    constructor(data) {
        super(data);
        this.id = '';
        this.points = [];
        this.courier_id = '';
        this.order_id = '';
        this.status_history = [];
        this.currentStatus = null;
        this.timeToNextStatus = 0;
        this.path_to_restaurant = [];
        this.path_to_customer = [];
        super.copyInto(data);
        if (this.path_to_customer.length) {
            this.path_to_customer = _.map(this.path_to_customer, x => JSON.parse(x));
        }
        if (this.path_to_restaurant.length) {
            this.path_to_restaurant = _.map(this.path_to_restaurant, x => JSON.parse(x));
        }
    }
    getData() {
        const self = this;
        const result = {};
        Object.keys(this).map(key => {
            if (this[key] instanceof DefaultModel) {
                return;
            }
            switch (key) {
                case '_raw':
                case 'order':
                case 'restaurant':
                case 'customer':
                case 'courier':
                case 'points':
                    return;
                case 'path_to_restaurant':
                case 'path_to_customer': {
                    result[key] = _.map(self[key], (x) => {
                        return JSON.stringify(x);
                    });
                    // console.log(result[key]);
                    return;
                }
            }
            result[key] = self[key];
        });
        return result;
    }
    setStatusHistory(histories) {
        this.status_history = histories;
        this.currentStatus = _.maxBy(histories, (x) => x.date_time);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsaXZlcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9saWJyYXJ5LWFwcC8iLCJzb3VyY2VzIjpbImxpYi9jb25zdGFudC9tb2RlbHMvZGVsaXZlcnkvZGVsaXZlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRzlDLE9BQU8sS0FBSyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBTTVCLE1BQU0sT0FBTyxRQUFTLFNBQVEsWUFBWTtJQWdCeEMsWUFBWSxJQUFTO1FBQ25CLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQWhCZCxPQUFFLEdBQVcsRUFBRSxDQUFDO1FBQ2hCLFdBQU0sR0FBWSxFQUFFLENBQUM7UUFDckIsZUFBVSxHQUFXLEVBQUUsQ0FBQztRQUN4QixhQUFRLEdBQVcsRUFBRSxDQUFDO1FBQ3RCLG1CQUFjLEdBQTRCLEVBQUUsQ0FBQztRQUM3QyxrQkFBYSxHQUEwQixJQUFJLENBQUM7UUFDNUMscUJBQWdCLEdBQVcsQ0FBQyxDQUFDO1FBTTdCLHVCQUFrQixHQUFVLEVBQUUsQ0FBQztRQUMvQixxQkFBZ0IsR0FBVSxFQUFFLENBQUM7UUFJM0IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFFO1FBQ0QsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5RTtJQUNILENBQUM7SUFFRCxPQUFPO1FBQ0wsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMxQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxZQUFZLEVBQUU7Z0JBQ3JDLE9BQU87YUFDUjtZQUVELFFBQVEsR0FBRyxFQUFFO2dCQUNYLEtBQUssTUFBTSxDQUFDO2dCQUNaLEtBQUssT0FBTyxDQUFDO2dCQUNiLEtBQUssWUFBWSxDQUFDO2dCQUNsQixLQUFLLFVBQVUsQ0FBQztnQkFDaEIsS0FBSyxTQUFTLENBQUM7Z0JBQ2YsS0FBSyxRQUFRO29CQUNYLE9BQU87Z0JBQ1QsS0FBSyxvQkFBb0IsQ0FBQztnQkFDMUIsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO29CQUN2QixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTt3QkFDbkMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMzQixDQUFDLENBQUMsQ0FBQztvQkFDSCw0QkFBNEI7b0JBQzVCLE9BQU87aUJBQ1I7YUFDRjtZQUNELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsU0FBa0M7UUFDakQsSUFBSSxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUM7UUFDaEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQXdCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyRixDQUFDO0NBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RlZmF1bHRNb2RlbH0gZnJvbSBcIi4uL2RlZmF1bHQtbW9kZWxcIjtcclxuaW1wb3J0IHtQb2ludH0gZnJvbSBcIi4uL3BvaW50L3BvaW50XCI7XHJcbmltcG9ydCB7RGVsaXZlcnlTdGF0dXNIaXN0b3J5fSBmcm9tIFwiLi9kZWxpdmVyeS1zdGF0dXMtaGlzdG9yeVwiO1xyXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCB7T3JkZXJ9IGZyb20gXCIuLi9vcmRlci9vcmRlclwiO1xyXG5pbXBvcnQge0NvdXJpZXJ9IGZyb20gXCIuLi9jb3VyaWVyL2NvdXJpZXJcIjtcclxuaW1wb3J0IHtSZXN0YXVyYW50fSBmcm9tIFwiLi4vcmVzdGF1cmFudC9yZXN0YXVyYW50XCI7XHJcbmltcG9ydCB7Q3VzdG9tZXJ9IGZyb20gXCIuLi9jdXN0b21lci9jdXN0b21lclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERlbGl2ZXJ5IGV4dGVuZHMgRGVmYXVsdE1vZGVsIHtcclxuICBpZDogc3RyaW5nID0gJyc7XHJcbiAgcG9pbnRzOiBQb2ludFtdID0gW107XHJcbiAgY291cmllcl9pZDogc3RyaW5nID0gJyc7XHJcbiAgb3JkZXJfaWQ6IHN0cmluZyA9ICcnO1xyXG4gIHN0YXR1c19oaXN0b3J5OiBEZWxpdmVyeVN0YXR1c0hpc3RvcnlbXSA9IFtdO1xyXG4gIGN1cnJlbnRTdGF0dXM6IERlbGl2ZXJ5U3RhdHVzSGlzdG9yeSA9IG51bGw7XHJcbiAgdGltZVRvTmV4dFN0YXR1czogbnVtYmVyID0gMDtcclxuXHJcbiAgb3JkZXI6IE9yZGVyO1xyXG4gIGNvdXJpZXI6IENvdXJpZXI7XHJcbiAgcmVzdGF1cmFudDogUmVzdGF1cmFudDtcclxuICBjdXN0b21lcjogQ3VzdG9tZXI7XHJcbiAgcGF0aF90b19yZXN0YXVyYW50OiBhbnlbXSA9IFtdO1xyXG4gIHBhdGhfdG9fY3VzdG9tZXI6IGFueVtdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKGRhdGE6IGFueSkge1xyXG4gICAgc3VwZXIoZGF0YSk7XHJcbiAgICBzdXBlci5jb3B5SW50byhkYXRhKTtcclxuICAgIGlmICh0aGlzLnBhdGhfdG9fY3VzdG9tZXIubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMucGF0aF90b19jdXN0b21lciA9IF8ubWFwKHRoaXMucGF0aF90b19jdXN0b21lciwgeCA9PiBKU09OLnBhcnNlKHgpKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnBhdGhfdG9fcmVzdGF1cmFudC5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5wYXRoX3RvX3Jlc3RhdXJhbnQgPSBfLm1hcCh0aGlzLnBhdGhfdG9fcmVzdGF1cmFudCwgeCA9PiBKU09OLnBhcnNlKHgpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldERhdGEoKTogb2JqZWN0IHtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgICBPYmplY3Qua2V5cyh0aGlzKS5tYXAoa2V5ID0+IHtcclxuICAgICAgaWYgKHRoaXNba2V5XSBpbnN0YW5jZW9mIERlZmF1bHRNb2RlbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICBjYXNlICdfcmF3JzpcclxuICAgICAgICBjYXNlICdvcmRlcic6XHJcbiAgICAgICAgY2FzZSAncmVzdGF1cmFudCc6XHJcbiAgICAgICAgY2FzZSAnY3VzdG9tZXInOlxyXG4gICAgICAgIGNhc2UgJ2NvdXJpZXInOlxyXG4gICAgICAgIGNhc2UgJ3BvaW50cyc6XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY2FzZSAncGF0aF90b19yZXN0YXVyYW50JzpcclxuICAgICAgICBjYXNlICdwYXRoX3RvX2N1c3RvbWVyJzoge1xyXG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBfLm1hcChzZWxmW2tleV0sICh4KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh4KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzdWx0W2tleV0pO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXN1bHRba2V5XSA9IHNlbGZba2V5XTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHNldFN0YXR1c0hpc3RvcnkoaGlzdG9yaWVzOiBEZWxpdmVyeVN0YXR1c0hpc3RvcnlbXSkge1xyXG4gICAgdGhpcy5zdGF0dXNfaGlzdG9yeSA9IGhpc3RvcmllcztcclxuICAgIHRoaXMuY3VycmVudFN0YXR1cyA9IF8ubWF4QnkoaGlzdG9yaWVzLCAoeDogRGVsaXZlcnlTdGF0dXNIaXN0b3J5KSA9PiB4LmRhdGVfdGltZSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuIl19