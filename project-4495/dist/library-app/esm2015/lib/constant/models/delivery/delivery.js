import { DefaultModel } from "../default-model";
import * as _ from 'lodash';
export class Delivery extends DefaultModel {
    constructor(data) {
        super(data);
        this.id = '';
        this.points = [];
        this.courier_id = '';
        this.order_id = '';
        this.status_history = [];
        this.currentStatus = null;
        this.timeToNextStatus = 0;
        this.path_to_restaurant = [];
        this.path_to_customer = [];
        super.copyInto(data);
        if (this.path_to_customer.length) {
            this.path_to_customer = _.map(this.path_to_customer, x => JSON.parse(x));
        }
        if (this.path_to_restaurant.length) {
            this.path_to_restaurant = _.map(this.path_to_restaurant, x => JSON.parse(x));
        }
    }
    getData() {
        const self = this;
        const result = {};
        Object.keys(this).map(key => {
            if (this[key] instanceof DefaultModel) {
                return;
            }
            switch (key) {
                case '_raw':
                case 'order':
                case 'restaurant':
                case 'customer':
                case 'courier':
                case 'points':
                case 'subscription':
                    return;
                case 'path_to_restaurant':
                case 'path_to_customer': {
                    result[key] = _.map(self[key], (x) => {
                        return JSON.stringify(x);
                    });
                    // console.log(result[key]);
                    return;
                }
            }
            result[key] = self[key];
        });
        return result;
    }
    setStatusHistory(histories) {
        this.status_history = histories;
        this.currentStatus = _.maxBy(histories, (x) => x.date_time);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsaXZlcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9saWJyYXJ5LWFwcC8iLCJzb3VyY2VzIjpbImxpYi9jb25zdGFudC9tb2RlbHMvZGVsaXZlcnkvZGVsaXZlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRzlDLE9BQU8sS0FBSyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBTTVCLE1BQU0sT0FBTyxRQUFTLFNBQVEsWUFBWTtJQWtCeEMsWUFBWSxJQUFTO1FBQ25CLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQWxCZCxPQUFFLEdBQVcsRUFBRSxDQUFDO1FBQ2hCLFdBQU0sR0FBWSxFQUFFLENBQUM7UUFDckIsZUFBVSxHQUFXLEVBQUUsQ0FBQztRQUN4QixhQUFRLEdBQVcsRUFBRSxDQUFDO1FBQ3RCLG1CQUFjLEdBQTRCLEVBQUUsQ0FBQztRQUM3QyxrQkFBYSxHQUEwQixJQUFJLENBQUM7UUFDNUMscUJBQWdCLEdBQVcsQ0FBQyxDQUFDO1FBTTdCLHVCQUFrQixHQUFVLEVBQUUsQ0FBQztRQUMvQixxQkFBZ0IsR0FBVSxFQUFFLENBQUM7UUFNM0IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFFO1FBQ0QsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5RTtJQUNILENBQUM7SUFFRCxPQUFPO1FBQ0wsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMxQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxZQUFZLEVBQUU7Z0JBQ3JDLE9BQU87YUFDUjtZQUVELFFBQVEsR0FBRyxFQUFFO2dCQUNYLEtBQUssTUFBTSxDQUFDO2dCQUNaLEtBQUssT0FBTyxDQUFDO2dCQUNiLEtBQUssWUFBWSxDQUFDO2dCQUNsQixLQUFLLFVBQVUsQ0FBQztnQkFDaEIsS0FBSyxTQUFTLENBQUM7Z0JBQ2YsS0FBSyxRQUFRLENBQUM7Z0JBQ2QsS0FBSyxjQUFjO29CQUNqQixPQUFPO2dCQUNULEtBQUssb0JBQW9CLENBQUM7Z0JBQzFCLEtBQUssa0JBQWtCLENBQUMsQ0FBQztvQkFDdkIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7d0JBQ25DLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDM0IsQ0FBQyxDQUFDLENBQUM7b0JBQ0gsNEJBQTRCO29CQUM1QixPQUFPO2lCQUNSO2FBQ0Y7WUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELGdCQUFnQixDQUFDLFNBQWtDO1FBQ2pELElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUF3QixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckYsQ0FBQztDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEZWZhdWx0TW9kZWx9IGZyb20gXCIuLi9kZWZhdWx0LW1vZGVsXCI7XHJcbmltcG9ydCB7UG9pbnR9IGZyb20gXCIuLi9wb2ludC9wb2ludFwiO1xyXG5pbXBvcnQge0RlbGl2ZXJ5U3RhdHVzSGlzdG9yeX0gZnJvbSBcIi4vZGVsaXZlcnktc3RhdHVzLWhpc3RvcnlcIjtcclxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQge09yZGVyfSBmcm9tIFwiLi4vb3JkZXIvb3JkZXJcIjtcclxuaW1wb3J0IHtDb3VyaWVyfSBmcm9tIFwiLi4vY291cmllci9jb3VyaWVyXCI7XHJcbmltcG9ydCB7UmVzdGF1cmFudH0gZnJvbSBcIi4uL3Jlc3RhdXJhbnQvcmVzdGF1cmFudFwiO1xyXG5pbXBvcnQge0N1c3RvbWVyfSBmcm9tIFwiLi4vY3VzdG9tZXIvY3VzdG9tZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEZWxpdmVyeSBleHRlbmRzIERlZmF1bHRNb2RlbCB7XHJcbiAgaWQ6IHN0cmluZyA9ICcnO1xyXG4gIHBvaW50czogUG9pbnRbXSA9IFtdO1xyXG4gIGNvdXJpZXJfaWQ6IHN0cmluZyA9ICcnO1xyXG4gIG9yZGVyX2lkOiBzdHJpbmcgPSAnJztcclxuICBzdGF0dXNfaGlzdG9yeTogRGVsaXZlcnlTdGF0dXNIaXN0b3J5W10gPSBbXTtcclxuICBjdXJyZW50U3RhdHVzOiBEZWxpdmVyeVN0YXR1c0hpc3RvcnkgPSBudWxsO1xyXG4gIHRpbWVUb05leHRTdGF0dXM6IG51bWJlciA9IDA7XHJcblxyXG4gIG9yZGVyOiBPcmRlcjtcclxuICBjb3VyaWVyOiBDb3VyaWVyO1xyXG4gIHJlc3RhdXJhbnQ6IFJlc3RhdXJhbnQ7XHJcbiAgY3VzdG9tZXI6IEN1c3RvbWVyO1xyXG4gIHBhdGhfdG9fcmVzdGF1cmFudDogYW55W10gPSBbXTtcclxuICBwYXRoX3RvX2N1c3RvbWVyOiBhbnlbXSA9IFtdO1xyXG5cclxuICBzdWJzY3JpcHRpb247XHJcblxyXG4gIGNvbnN0cnVjdG9yKGRhdGE6IGFueSkge1xyXG4gICAgc3VwZXIoZGF0YSk7XHJcbiAgICBzdXBlci5jb3B5SW50byhkYXRhKTtcclxuICAgIGlmICh0aGlzLnBhdGhfdG9fY3VzdG9tZXIubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMucGF0aF90b19jdXN0b21lciA9IF8ubWFwKHRoaXMucGF0aF90b19jdXN0b21lciwgeCA9PiBKU09OLnBhcnNlKHgpKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnBhdGhfdG9fcmVzdGF1cmFudC5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5wYXRoX3RvX3Jlc3RhdXJhbnQgPSBfLm1hcCh0aGlzLnBhdGhfdG9fcmVzdGF1cmFudCwgeCA9PiBKU09OLnBhcnNlKHgpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldERhdGEoKTogb2JqZWN0IHtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgICBPYmplY3Qua2V5cyh0aGlzKS5tYXAoa2V5ID0+IHtcclxuICAgICAgaWYgKHRoaXNba2V5XSBpbnN0YW5jZW9mIERlZmF1bHRNb2RlbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICBjYXNlICdfcmF3JzpcclxuICAgICAgICBjYXNlICdvcmRlcic6XHJcbiAgICAgICAgY2FzZSAncmVzdGF1cmFudCc6XHJcbiAgICAgICAgY2FzZSAnY3VzdG9tZXInOlxyXG4gICAgICAgIGNhc2UgJ2NvdXJpZXInOlxyXG4gICAgICAgIGNhc2UgJ3BvaW50cyc6XHJcbiAgICAgICAgY2FzZSAnc3Vic2NyaXB0aW9uJzpcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBjYXNlICdwYXRoX3RvX3Jlc3RhdXJhbnQnOlxyXG4gICAgICAgIGNhc2UgJ3BhdGhfdG9fY3VzdG9tZXInOiB7XHJcbiAgICAgICAgICByZXN1bHRba2V5XSA9IF8ubWFwKHNlbGZba2V5XSwgKHgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXN1bHRba2V5XSk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJlc3VsdFtrZXldID0gc2VsZltrZXldO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc2V0U3RhdHVzSGlzdG9yeShoaXN0b3JpZXM6IERlbGl2ZXJ5U3RhdHVzSGlzdG9yeVtdKSB7XHJcbiAgICB0aGlzLnN0YXR1c19oaXN0b3J5ID0gaGlzdG9yaWVzO1xyXG4gICAgdGhpcy5jdXJyZW50U3RhdHVzID0gXy5tYXhCeShoaXN0b3JpZXMsICh4OiBEZWxpdmVyeVN0YXR1c0hpc3RvcnkpID0+IHguZGF0ZV90aW1lKTtcclxuICB9XHJcblxyXG59XHJcblxyXG4iXX0=